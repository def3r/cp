// clang-format off
#include "dbg.h"

bool recFunFilled(int row, int col, vector<vector<char>> &board) {
  if (col >= 9 || row >= 9) return true;
  if (board[row][col] == '.')
    return recFunFilled(row + (col + 1 == 9), (col + 1) % 9, board);

  char i = board[row][col];
  int j = 0, r = (row / 3) * 3, c = (col / 3) * 3;
  for (j = 0; j < 9; j++) {
    if (board[row][j] == i && j != col) {
      break;
    }
    if (board[j][col] == i && j != row) {
      break;
    }
    if (board[r + (j / 3)][c + (j % 3)] == i &&
        (r + (j / 3) != row && c + (j % 3) != col)
       ) {
      break;
    }
  }
  if (j < 9) return false;

  return recFunFilled(row + (col + 1 == 9), (col + 1) % 9, board);
}

bool isValidSudoku(vector<vector<char>> &board) { return recFunFilled(0, 0, board); }

#undef dbg_test_fun
int main() {
  vector<vector<char>> board = {};

#define dbg_test_fun isValidSudoku(board)

  dbg_test_with(true,
    board = {{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
    {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
    {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
    {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
    {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
    {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
    {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
    {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
    {'.', '.', '.', '.', '8', '.', '.', '7', '9'}}
  );

  dbg_test_with(false,
    board = {{'8', '3', '.', '.', '7', '.', '.', '.', '.'},
    {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
    {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
    {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
    {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
    {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
    {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
    {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
    {'.', '.', '.', '.', '8', '.', '.', '7', '9'}}
  );

  dbg_test_with(true,
    board = {{'.', '8', '7', '6', '5', '4', '3', '2', '1'},
    {'2', '.', '.', '.', '.', '.', '.', '.', '.'},
    {'3', '.', '.', '.', '.', '.', '.', '.', '.'},
    {'4', '.', '.', '.', '.', '.', '.', '.', '.'},
    {'5', '.', '.', '.', '.', '.', '.', '.', '.'},
    {'6', '.', '.', '.', '.', '.', '.', '.', '.'},
    {'7', '.', '.', '.', '.', '.', '.', '.', '.'},
    {'8', '.', '.', '.', '.', '.', '.', '.', '.'},
    {'9', '.', '.', '.', '.', '.', '.', '.', '.'}}
  );
  return EXIT_SUCCESS;
}
